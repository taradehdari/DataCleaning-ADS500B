clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = binomial())
summary(model)
fitted.results <- predict(model, newdata=subset(test_data, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test_data)
print(paste('accuracy', 1-predict.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = binomial())
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predict.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = binomial())
summary(model)
fitted.results <- predict(model, newdata=subset(test_data, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test_data$deposit)
print(paste('accuracy', 1-predict.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test_data, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test_data$deposit)
print(paste('accuracy', 1-predict.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test_data, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test_data$deposit)
print(paste('accuracy', 1-predicted.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
View(test_data)
View(test)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test_data <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[!trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
table(test_data$deposit, predicted.results)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test_data)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
#table(test_data$deposit, predicted.results)
print(paste('accuracy', 1-predicted.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
dim(train)
dim(test)
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
#table(test_data$deposit, predicted.results)
print(paste('accuracy', 1-predicted.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.6, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.9, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.5, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age + job + marital + education + default + balance + housing + loan + contact + duration + campaign + pdays + previous + poutcome, data = train, family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- ifelse(fitted.results > 0.5, 1, 0)
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
corr(predicted.results1, test$deposti)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
corr(predicted.results1, test$deposit)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
cor(predicted.results1, test$deposit)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
predicted.results1 <- as.numeric(predicted.results1)
cor(predicted.results1, test$deposit)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
predicted.results1 <- as.numeric(predicted.results1)
test$deposit <- as.numeric(test$deposit)
cor(predicted.results1, test$deposit)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
print(paste('accuracy', 1-predicted.results1))
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1, Actual = as.numeric(test$deposit))
cor(results_df$Predicted, results_df$Actual)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1, Actual = as.numeric(test$deposit))
print(paste('accuracy', 1-predicted.results1))
#cor(results_df$Predicted, results_df$Actual)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
class_error <- mean(predicted.results1 != test$deposit)
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1, Actual = as.numeric(test$deposit))
print(paste('accuracy', 1-class_error))
#cor(results_df$Predicted, results_df$Actual)
final_model <- glm(deposit ~ job + poutcome, data = train, family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- ifelse(fitted.results1 > 0.5, 1, 0)
predicted.results1 <- mean(predicted.results1 != test$deposit)
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1, Actual = as.numeric(test$deposit))
print(paste('accuracy', 1-predicted.results1))
#cor(results_df$Predicted, results_df$Actual)
