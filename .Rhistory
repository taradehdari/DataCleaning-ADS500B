geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = "age_group")
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = interaction(deposit.x,deposit.y))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = "age_group")
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = deposit.y)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
View(age_depo_count_norm)
View(age_depo_count)
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = "deposit")
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
View(age_depo_count)
View(age_depo_count_norm)
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = c("age_group","deposit"))
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = "age_group")
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
View(agecount)
View(age_depo_count_norm)
View(agecount)
# Group data by age group and deposit, and count number of observations
agecount <- clientdata %>%
group_by(age_group) %>%
summarize(count = n()) %>%
ungroup()
# Create bar chart of age groups
ggplot(agecount, aes(x = age_group, y = count)) +
geom_bar(stat = "identity") +
labs(title = "Clients by Age Group",
x = "Age Group",
y = "Count of Clients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# group data by age and deposit and calculate the count
age_depo_count <- clientdata %>%
group_by(age_group, deposit) %>%
summarize(count = n()) %>%
ungroup()
# join two datasets by age group and deposit
age_depo_count_norm <- left_join(age_depo_count, agecount, by = "age_group")
#view(age_depo_count_norm)
# calculate the normalized count of deposits
age_depo_count_norm$count_norm <- age_depo_count_norm$count.x / age_depo_count_norm$count.y
# clustered bar chart deposit vs, age
ggplot(age_depo_count_norm, aes(x = age_group, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Age Group",
x = "Age Group",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
install.packages('tinytex')
tinytex::install_tinytex()
#Aggregating the data by job type
clientdata %>% group_by(job)
%>% summarize(total_deposits = sum(deposit == 'yes'))
#Aggregating the data by job type
clientdata %>%
group_by(job) %>%
summarize(
total_deposits = sum(deposit == 'yes')
) %>%
arrange(desc(total_deposits))
#Aggregating the data by month
clientdata %>%
group_by(month) %>%
summarize(
total_deposits = sum(deposit == 'yes')
) %>% arrange(desc(total_deposits))
clientdata %>%
group_by(month) %>%
summarize(
total_contacts = sum(campaign)
) %>% arrange(desc(total_contacts))
#Aggregating the data by month
clientdata %>%
group_by(month) %>%
summarize(
total_deposits = sum(deposit == 'yes')
) %>%
arrange(desc(total_deposits))
clientdata %>%
group_by(month) %>%
summarize(
total_contacts = sum(campaign)
) %>%
arrange(desc(total_contacts))
#Aggregating the data by poutcome
clientdata %>%
group_by(poutcome) %>%
summarize(
total_deposits = sum(deposit == 'yes')
) %>%
arrange(desc(total_deposits))
#numerical measures of centrality --> mean, median, mode
#measures of centrality of age
mean_age <- round(mean(clientdata$age),2)
median_age <- round(median(clientdata$age),2)
mode_age <- clientdata %>%
count(age) %>%
filter(n == max(n)) %>%
pull(age)
#measures of centrality of balance
mean_balance <- round(mean(clientdata$balance),2)
median_balance <- round(median(clientdata$balance),2)
mode_balance <- clientdata %>%
count(balance) %>%
filter(n == max(n)) %>%
pull(balance)
#measures of centrality of day
mean_day <- round(mean(clientdata$day),2)
median_day <- round(median(clientdata$day),2)
mode_day <- clientdata %>%
count(day) %>%
filter(n == max(n)) %>%
pull(day)
#measures of centrality of duration
mean_duration <- round(mean(clientdata$duration),2)
median_duration <- round(median(clientdata$duration),2)
mode_duration <- clientdata %>%
count(duration) %>%
filter(n == max(n)) %>%
pull(duration)
#check if there are two modes
if (length(mode_duration) > 1) {
mode_duration <- paste(mode_duration, collapse = ", ")
}
#measures of centrality of campaign
mean_campaign <- round(mean(clientdata$campaign),2)
median_campaign <- round(median(clientdata$campaign),2)
mode_campaign <- clientdata %>%
count(campaign) %>%
filter(n == max(n)) %>%
pull(campaign)
#measures of centrality of pdays
mean_pdays <- round(mean(clientdata$pdays),2)
median_pdays <- round(median(clientdata$pdays),2)
mode_pdays <- clientdata %>%
count(pdays) %>%
filter(n == max(n)) %>%
pull(pdays)
#measures of centrality of previous
mean_previous <- round(mean(clientdata$previous),2)
median_previous <- round(median(clientdata$previous),2)
mode_previous <- clientdata %>%
count(previous) %>%
filter(n == max(n)) %>%
pull(previous)
summary_df <- data.frame(
row.names = c("Age","Balance","Day","Duration","Campaign","pdays","Previous"),
Mean = c(mean_age,
mean_balance,
mean_day,
mean_duration,
mean_campaign,
mean_pdays,
mean_previous),
Median = c(median_age,
median_balance,
median_day,
median_duration,
median_campaign,
median_pdays,
median_previous),
Mode = c(mode_age,
mode_balance,
mode_day,
mode_duration,
mode_campaign,
mode_pdays,
mode_previous)
)
summary_df
# Creating age groups
clientdata$age_group <- cut(clientdata$age, breaks = c(15, 29, 39, 49, 59, 69, 79, 95),
labels = c("18-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-95"))
# Converting age to a factor
clientdata$age_group <- factor(clientdata$age_group,
levels = c("18-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-95"))
# Save the modified data back to same file
write.csv(clientdata, "clientdata.csv", row.names = FALSE)
# categorical columns
cat_data <- clientdata[, c("deposit", "age_group", "marital", "job", "education", "default", "housing", "loan", "poutcome")]
# convert deposit to 1,0
cat_data$deposit <- ifelse(cat_data$deposit == "yes", 1, 0)
#view(cat_data)
#convert categorical variables to factors
cat_data$age_group <- factor(cat_data$age_group)
cat_data$marital <- factor(cat_data$marital)
cat_data$job <- factor(cat_data$job)
cat_data$education <- factor(cat_data$education)
cat_data$default <- factor(cat_data$default)
cat_data$housing <- factor(cat_data$housing)
cat_data$loan <- factor(cat_data$loan)
cat_data$poutcome <- factor(cat_data$poutcome)
corr_matrix_cat <- hetcor(as.matrix(cat_data), use = "pairwise.complete.obs")
corr_matrix_cat$correlations
# Group data by previous outcome and deposit, and count number of observations
previousoutcomecount <- clientdata %>%
group_by(poutcome) %>%
summarize(count1 = n()) %>%
ungroup()
#view(maritalcount)
# group data by poutcome and deposit and calculate the count
poutcome_depo_count <- clientdata %>%
group_by(poutcome, deposit) %>%
summarize(count = n()) %>%
ungroup()
#view(poutcome_depo_count)
# join two datasets by poutcome and deposit
poutcome_depo_count_norm <- left_join(poutcome_depo_count, previousoutcomecount, by = c("poutcome"))
#view(poutcome_depo_count_norm)
# calculate the normalized count of deposits
poutcome_depo_count_norm$count_norm <-
poutcome_depo_count_norm$count / poutcome_depo_count_norm$count1
# clustered bar chart deposit vs previous outcome
ggplot(poutcome_depo_count_norm, aes(x = poutcome, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Previous Outcome",
x = "Previous Outcome",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Group data by marital and deposit, and count number of observations
maritalcount <- clientdata %>%
group_by(marital) %>%
summarize(count1 = n()) %>%
ungroup()
#view(maritalcount)
# group data by marital and deposit and calculate the count
marital_depo_count <- clientdata %>%
group_by(marital, deposit) %>%
summarize(count = n()) %>%
ungroup()
#view(marital_depo_count)
# join two datasets by marital and deposit
marital_depo_count_norm <- left_join(marital_depo_count, maritalcount, by = c("marital"))
#view(marital_depo_count_norm)
# calculate the normalized count of deposits
marital_depo_count_norm$count_norm <-
marital_depo_count_norm$count / marital_depo_count_norm$count1
# clustered bar chart deposit vs marital status
ggplot(marital_depo_count_norm, aes(x = marital, y = count_norm, fill = deposit)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Deposits by Marital Status",
x = "Marital",
y = "Normalized Count of Deposits",
fill = "Deposit") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age +
job +
marital +
education +
default +
balance +
housing +
loan +
contact +
duration +
campaign +
pdays +
previous +
poutcome,
data = train,
family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- factor(ifelse(fitted.results > 0.5, "yes", "no"), levels = levels(test$deposit))
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
final_model <- glm(deposit ~ job +
housing +
duration  +
campaign +
poutcome,
data = train,
family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- factor(ifelse(fitted.results1 > 0.5, "yes", "no"), levels = levels(test$deposit))
confusion_matrix <- confusionMatrix(predicted.results1, test$deposit)
accuracy <- mean(predicted.results1 == test$deposit)
predicted.results1 <- mean(predicted.results1 != test$deposit)
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1, Actual = as.numeric(test$deposit))
# print confusion matrix
print(confusion_matrix$table)
# print accuracy
accuracy <- confusion_matrix$overall['Accuracy']
print(paste('accuracy', accuracy))
# print other evaluation metrics
print(confusion_matrix$byClass)
#creating categorical variables into factors
clientdata$job <- as.factor(clientdata$job)
clientdata$marital <- as.factor(clientdata$marital)
clientdata$education <- as.factor(clientdata$education)
clientdata$default <- as.factor(clientdata$default)
clientdata$housing <- as.factor(clientdata$housing)
clientdata$loan <- as.factor(clientdata$loan)
clientdata$contact <- as.factor(clientdata$contact)
clientdata$poutcome <- as.factor(clientdata$poutcome)
clientdata$deposit <- factor(clientdata$deposit, levels = c("no", "yes"))
#splitting data
set.seed(123)
trainIndex <- createDataPartition(clientdata$deposit, p = 0.7, list = FALSE)
train <- clientdata[trainIndex, ]
test <- clientdata[-trainIndex, ]
#building the logistic regression model
model <- glm(deposit ~ age +
job +
marital +
education +
default +
balance +
housing +
loan +
contact +
duration +
campaign +
pdays +
previous +
poutcome,
data = train,
family = "binomial")
summary(model)
fitted.results <- predict(model, newdata=subset(test, type = 'response'))
predicted.results <- factor(ifelse(fitted.results > 0.5, "yes", "no"),
levels = levels(test$deposit))
predicted.results <- mean(predicted.results != test$deposit)
print(paste('accuracy', 1-predicted.results))
final_model <- glm(deposit ~ job +
housing +
duration  +
campaign +
poutcome,
data = train,
family = binomial())
summary(final_model)
fitted.results1 <- predict(final_model, newdata=subset(test, type = 'response'))
predicted.results1 <- factor(ifelse(fitted.results1 > 0.5, "yes", "no"),
levels = levels(test$deposit))
confusion_matrix <- confusionMatrix(predicted.results1, test$deposit)
accuracy <- mean(predicted.results1 == test$deposit)
predicted.results1 <- mean(predicted.results1 != test$deposit)
predicted.results1 <- as.numeric(predicted.results1)
results_df <- data.frame(Predicted = predicted.results1,
Actual = as.numeric(test$deposit))
# print confusion matrix
print(confusion_matrix$table)
# print accuracy
accuracy <- confusion_matrix$overall['Accuracy']
print(paste('accuracy', accuracy))
# print other evaluation metrics
print(confusion_matrix$byClass)
